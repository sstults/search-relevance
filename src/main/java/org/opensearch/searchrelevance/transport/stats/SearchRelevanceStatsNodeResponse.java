/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */
package org.opensearch.searchrelevance.transport.stats;

import java.io.IOException;
import java.util.Map;

import org.opensearch.action.support.nodes.BaseNodeResponse;
import org.opensearch.cluster.node.DiscoveryNode;
import org.opensearch.core.common.io.stream.StreamInput;
import org.opensearch.core.common.io.stream.StreamOutput;
import org.opensearch.core.xcontent.ToXContentFragment;
import org.opensearch.core.xcontent.XContentBuilder;
import org.opensearch.searchrelevance.stats.events.EventStatName;
import org.opensearch.searchrelevance.stats.events.TimestampedEventStatSnapshot;

import lombok.Getter;

/**
 * SearchRelevanceStatsNodeResponse represents the responses generated by an individual node
 */
public class SearchRelevanceStatsNodeResponse extends BaseNodeResponse implements ToXContentFragment {
    @Getter
    private Map<EventStatName, TimestampedEventStatSnapshot> stats;

    /**
     * Constructor
     *
     * @param in  stream
     * @throws IOException in case of I/O errors
     */
    public SearchRelevanceStatsNodeResponse(StreamInput in) throws IOException {
        super(in);
        this.stats = in.readMap(input -> input.readEnum(EventStatName.class), TimestampedEventStatSnapshot::new);
    }

    /**
     * Constructor
     *
     * @param node node
     * @param stats mapping of stat name to value
     */
    public SearchRelevanceStatsNodeResponse(DiscoveryNode node, Map<EventStatName, TimestampedEventStatSnapshot> stats) {
        super(node);
        this.stats = stats;
    }

    /**
     * Creates a new SearchRelevanceStatsNodeResponse object and reads in the stats from an input stream
     *
     * @param in StreamInput to read from
     * @return SearchRelevanceStatsNodeResponse object corresponding to the input stream
     * @throws IOException throws an IO exception if the StreamInput cannot be read from
     */
    public static SearchRelevanceStatsNodeResponse readStats(StreamInput in) throws IOException {
        SearchRelevanceStatsNodeResponse response = new SearchRelevanceStatsNodeResponse(in);
        return response;
    }

    @Override
    public void writeTo(StreamOutput out) throws IOException {
        super.writeTo(out);
        out.writeMap(stats, StreamOutput::writeEnum, (output, eventStatData) -> eventStatData.writeTo(output));
    }

    /**
     * Converts statsMap to xContent
     *
     * @param builder XContentBuilder
     * @param params Params
     * @return XContentBuilder
     * @throws IOException thrown by builder for invalid field
     */
    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
        for (Map.Entry<EventStatName, TimestampedEventStatSnapshot> entry : stats.entrySet()) {
            EventStatName stat = entry.getKey();
            builder.field(stat.getFullPath(), entry.getValue().getValue());
        }
        return builder;
    }
}
