import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.SSLContext
import javax.net.ssl.SSLSession
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.security.GeneralSecurityException
import java.security.cert.X509Certificate
import java.util.concurrent.Callable
import org.opensearch.gradle.testclusters.OpenSearchCluster
import org.opensearch.gradle.test.RestIntegTestTask


import java.util.concurrent.TimeUnit
import java.util.function.Predicate
import java.util.stream.Collectors

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.1.0-SNAPSHOT")
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
        // 2.2.0-SNAPSHOT -> 2.2.0.0-SNAPSHOT
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        plugin_no_snapshot = opensearch_build
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
            plugin_no_snapshot += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }
        opensearch_group = "org.opensearch"
        common_utils_version = System.getProperty("common_utils.version", opensearch_build)
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:7.0.4"
        classpath "com.github.form-com.diff-coverage-gradle:diff-coverage:0.9.5"
        classpath "io.freefair.gradle:lombok-plugin:8.13.1"
    }
}

plugins {
    id("de.undercouch.download") version "5.6.0"
}

apply plugin: 'java'
apply plugin: 'java-test-fixtures'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'
// for formatting and license headers
apply plugin: 'com.diffplug.spotless'
apply from: 'formatter/formatting.gradle'
// for coverage and diff
apply plugin: 'jacoco'
apply plugin: 'com.form.diff-coverage'
apply plugin: 'opensearch.java-agent'
apply plugin: 'io.freefair.lombok'

def pluginName = 'opensearch-search-relevance'
def pluginDescription = 'opensearch plugin that enables users to fine tuning search based on search relevance judgments'
def packagePath = 'org.opensearch'
def pathToPlugin = 'searchrelevance.plugin'
def pluginClassName = 'SearchRelevancePlugin'

java {
    targetCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')

    ['esnode.pem', 'esnode-key.pem', 'kirk.pem', 'kirk-key.pem', 'root-ca.pem', 'sample.pem', 'test-kirk.jks'].forEach { file ->
        File local = getLayout().getBuildDirectory().file(file).get().getAsFile()
        download.run {
            src "https://raw.githubusercontent.com/opensearch-project/security/refs/heads/main/bwc-test/src/test/resources/security/" + file
            dest local
            overwrite false
        }
        processTestResources {
            from(local)
        }
    }
}

allprojects {
    group = 'org.opensearch'
    version = opensearch_version.tokenize('-')[0] + '.0'
    if (buildVersionQualifier) {
        version += "-${buildVersionQualifier}"
    }
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }

    plugins.withId('java') {
        targetCompatibility = JavaVersion.VERSION_21
        sourceCompatibility = JavaVersion.VERSION_21
    }
}

publishing {
    repositories {
        maven {
            name = "Snapshots"
            url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
        maven {
            name = 'staging'
            url = "${rootProject.buildDir}/local-staging-repo"
        }
    }
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
              name = pluginName
              description = pluginDescription
              groupId = "org.opensearch.plugin"
            }
        }
        all {
            pom {
                name = "opensearch-search-relevance"
                description = "OpenSearch Search Relevance plugin"
            }
            pom.withXml { XmlProvider xml ->
                Node node = xml.asNode()
                node.appendNode('inceptionYear', '2021')
                if (!node.'description') {
                    node.appendNode('description', description)
                }
                if (!node.'licenses') {
                    Node license = node.appendNode('licenses').appendNode('license')
                    license.appendNode('name', "The Apache License, Version 2.0")
                    license.appendNode('url', "http://www.apache.org/licenses/LICENSE-2.0.txt")
                }

                if (!node.'developers') {
                    Node developer = node.appendNode('developers').appendNode('developer')
                    developer.appendNode('name', 'OpenSearch')
                    developer.appendNode('url', 'https://github.com/opensearch-project/search-relevance')
                }
            }
        }
    }
}

opensearchplugin {
    name pluginName
    description pluginDescription
    classname "${packagePath}.${pathToPlugin}.${pluginClassName}"
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

dependencyLicenses.enabled = false
// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false
thirdPartyAudit.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

configurations {
    zipArchive
    opensearchPlugin
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    implementation "org.opensearch:opensearch:${opensearch_version}"
    api "org.opensearch:opensearch:${opensearch_version}"
    api group: 'org.opensearch', name:'opensearch-ml-client', version: "${opensearch_build}"
    implementation group: 'com.google.guava', name: 'guava', version:'32.1.3-jre'
    compileOnly group: 'commons-lang', name: 'commons-lang', version: '2.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation "org.opensearch:common-utils:${common_utils_version}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}"
    implementation 'com.knuddels:jtokkit:1.1.0'
    // ml-common excluded reflection for runtime so we need to add it by ourselves.
    // https://github.com/opensearch-project/ml-commons/commit/464bfe34c66d7a729a00dd457f03587ea4e504d9
    // TODO: Remove following three lines of dependencies if ml-common include them in their jar
    runtimeOnly group: 'org.reflections', name: 'reflections', version: '0.9.12'  // Note the version change
    runtimeOnly group: 'org.javassist', name: 'javassist', version: '3.29.2-GA'
    runtimeOnly group: 'org.opensearch', name: 'common-utils', version: "${opensearch_build}"
    runtimeOnly group: 'org.apache.commons', name: 'commons-text', version: '1.13.1'
    runtimeOnly group: 'com.google.code.gson', name: 'gson', version: '2.13.1'
    runtimeOnly group: 'org.json', name: 'json', version: '20250517'
    // json-path 2.9.0 depends on slf4j 2.0.11, which conflicts with the version used by OpenSearch core.
    // Excluding slf4j here since json-path is only used for testing, and logging failures in this context are acceptable.
    runtimeOnly('com.jayway.jsonpath:json-path:2.9.0') {
        // OpenSearch core is using slf4j 1.7.36. Therefore, we cannot change the version here.
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'net.minidev', module: 'json-smart'
    }
    runtimeOnly group: 'net.minidev', name:'json-smart', version: "${versions.json_smart}"
    runtimeOnly("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")
    runtimeOnly("com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}")
    // ZipArchive dependencies used for integration tests
    // Check the order in case of transitive dependencies
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-job-scheduler', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-ml-plugin', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-knn', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'neural-search', version: "${opensearch_build}"
    opensearchPlugin "org.opensearch.plugin:opensearch-security:${opensearch_build}@zip"

    configurations.all {
        resolutionStrategy {
            force("com.google.guava:guava:32.1.3-jre") // CVE for 31.1
        }
    }
}

def _numNodes = findProperty('numNodes') as Integer ?: 1

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    include '**/*Tests.class'
    systemProperty 'tests.security.manager', 'false'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}
tasks.named("check").configure { dependsOn(jacocoTestReport) }

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

ext.resolvePluginFile = { pluginId ->
    return new Callable<RegularFile>() {
        @Override
        RegularFile call() throws Exception {
            return new RegularFile() {
                @Override
                File getAsFile() {
                    return configurations.opensearchPlugin.resolvedConfiguration.resolvedArtifacts
                            .find { ResolvedArtifact f ->
                                f.name.startsWith(pluginId)
                            }
                            .file
                }
            }
        }
    }
}
def securityPluginFile = resolvePluginFile("opensearch-security")

// === Setup security test ===
// This flag indicates the existence of security plugin
def securityEnabled = System.getProperty("security.enabled", "false") == "true" || System.getProperty("security", "false") == "true" || System.getProperty("https", "false") == "true"

// Set up integration test clusters, installs all zipArchive dependencies and Flow Framework
testClusters.integTest {
    testDistribution = "ARCHIVE"

    // Installs all registered zipArchive dependencies on integTest cluster nodes except security
    configurations.zipArchive.asFileTree.each {
        plugin(provider(new Callable<RegularFile>(){
            @Override
            RegularFile call() throws Exception {
                return new RegularFile() {
                    @Override
                    File getAsFile() {
                        return it
                    }
                }
            }
        })
        )

    }

    // Install Flow Framework Plugin on integTest cluster nodes
    plugin(project.tasks.bundlePlugin.archiveFile)

    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes

    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug OpenSearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("opensearch.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=*:${debugPort}")
            debugPort += 1
        }
    }

    if (securityEnabled) {
        plugin(provider(securityPluginFile))
    }

    nodes.each { node ->
//        def plugins = node.plugins
//        def firstPlugin = plugins.get(0)
//        plugins.remove(0)
//        plugins.add(firstPlugin)

        if (securityEnabled) {
            node.extraConfigFile("kirk.pem", file("build/resources/test/kirk.pem"))
            node.extraConfigFile("kirk-key.pem", file("build/resources/test/kirk-key.pem"))
            node.extraConfigFile("esnode.pem", file("build/resources/test/esnode.pem"))
            node.extraConfigFile("esnode-key.pem", file("build/resources/test/esnode-key.pem"))
            node.extraConfigFile("root-ca.pem", file("build/resources/test/root-ca.pem"))
            node.setting("plugins.security.ssl.transport.pemcert_filepath", "esnode.pem")
            node.setting("plugins.security.ssl.transport.pemkey_filepath", "esnode-key.pem")
            node.setting("plugins.security.ssl.transport.pemtrustedcas_filepath", "root-ca.pem")
            node.setting("plugins.security.ssl.transport.enforce_hostname_verification", "false")
            node.setting("plugins.security.ssl.http.enabled", "true")
            node.setting("plugins.security.ssl.http.pemcert_filepath", "esnode.pem")
            node.setting("plugins.security.ssl.http.pemkey_filepath", "esnode-key.pem")
            node.setting("plugins.security.ssl.http.pemtrustedcas_filepath", "root-ca.pem")
            node.setting("plugins.security.allow_unsafe_democertificates", "true")
            node.setting("plugins.security.allow_default_init_securityindex", "true")
            node.setting("plugins.security.authcz.admin_dn", "\n - CN=kirk,OU=client,O=client,L=test,C=de")
            node.setting("plugins.security.audit.type", "internal_opensearch")
            node.setting("plugins.security.enable_snapshot_restore_privilege", "true")
            node.setting("plugins.security.check_snapshot_restore_write_privileges", "true")
            node.setting("plugins.security.restapi.roles_enabled", "[\"all_access\", \"security_rest_api_access\"]")
            node.setting("plugins.security.system_indices.enabled", "true")
        }
    }
}

// Re-write WaitForHttpResource with updated code to support security plugin use case
class WaitForClusterYellow {

    private URL url
    private String username
    private String password
    Set<Integer> validResponseCodes = Collections.singleton(200)

    WaitForClusterYellow(String protocol, String host, int numberOfNodes) throws MalformedURLException {
        this(new URL(protocol + "://" + host + "/_cluster/health?wait_for_nodes=>=" + numberOfNodes + "&wait_for_status=yellow"))
    }

    WaitForClusterYellow(URL url) {
        this.url = url
    }

    boolean wait(int durationInMs) throws GeneralSecurityException, InterruptedException, IOException {
        final long waitUntil = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(durationInMs)
        final long sleep = 100

        IOException failure = null
        while (true) {
            try {
                checkResource()
                return true
            } catch (IOException e) {
                failure = e
            }
            if (System.nanoTime() < waitUntil) {
                Thread.sleep(sleep)
            } else {
                throw failure
            }
        }
    }

    void setUsername(String username) {
        this.username = username
    }

    void setPassword(String password) {
        this.password = password
    }

    void checkResource() throws IOException {
        final HttpURLConnection connection = buildConnection()
        connection.connect()
        final Integer response = connection.getResponseCode()
        if (validResponseCodes.contains(response)) {
            return
        } else {
            throw new IOException(response + " " + connection.getResponseMessage())
        }
    }

    HttpURLConnection buildConnection() throws IOException {
        final HttpURLConnection connection = (HttpURLConnection) this.@url.openConnection()

        if (connection instanceof HttpsURLConnection) {
            TrustManager[] trustAllCerts = [new X509TrustManager() {
                X509Certificate[] getAcceptedIssuers() {
                    return null
                }

                void checkClientTrusted(X509Certificate[] certs, String authType) {
                }

                void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
            ] as TrustManager[]
            SSLContext sc = SSLContext.getInstance("SSL")
            sc.init(null, trustAllCerts, new java.security.SecureRandom())
            connection.setSSLSocketFactory(sc.getSocketFactory())
            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {
                boolean verify(String hostname, SSLSession session) {
                    return true
                }
            }
            // Install the all-trusting host verifier
            connection.setHostnameVerifier(allHostsValid)
        }

        configureBasicAuth(connection)
        connection.setRequestMethod("GET")
        return connection
    }

    void configureBasicAuth(HttpURLConnection connection) {
        if (username != null) {
            if (password == null) {
                throw new IllegalStateException("Basic Auth user [" + username + "] has been set, but no password has been configured")
            }
            connection.setRequestProperty(
                    "Authorization",
                    "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes(StandardCharsets.UTF_8))
            )
        }
    }

}

def waitForClusterSetup(OpenSearchCluster cluster, Boolean securityEnabled) {
    cluster.@waitConditions.clear()
    String unicastUris = cluster.nodes.stream().flatMap { node ->
        node.getAllTransportPortURI().stream()
    }.collect(Collectors.joining("\n"))
    cluster.nodes.forEach { node ->
        try {
            Files.write(node.getConfigDir().resolve("unicast_hosts.txt"), unicastUris.getBytes(StandardCharsets.UTF_8))
        } catch (IOException e) {
            throw new java.io.UncheckedIOException("Failed to write configuation files for " + this, e)
        }
    }

    Predicate pred = {
        String protocol = securityEnabled ? "https" : "http"
        String host = System.getProperty("tests.cluster", cluster.getFirstNode().getHttpSocketURI())
        WaitForClusterYellow wait = new WaitForClusterYellow(protocol, host, cluster.nodes.size())
        wait.setUsername(System.getProperty("user", "admin"))
        wait.setPassword(System.getProperty("password", "admin"))
        return wait.wait(180000)
    }

    cluster.@waitConditions.put("cluster health yellow", pred)
    cluster.waitForAllConditions()
}

def opensearch_tmp_dir = rootProject.file('build/private/opensearch_tmp').absoluteFile
opensearch_tmp_dir.mkdirs()

integTest {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', opensearch_tmp_dir.absolutePath
    systemProperty 'buildDir', buildDir.path
    systemProperty "https", securityEnabled
    systemProperty "security", securityEnabled
    systemProperty "user", System.getProperty("user", "admin")
    systemProperty "password", "admin"
    // defaulting to admin since security plugin's demo config tool is not used
    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst {
        systemProperty 'cluster.debug', getDebug()
        // Set number of nodes system property to be used in tests
        systemProperty 'cluster.number_of_nodes', "${_numNodes}"
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            waitForClusterSetup(cluster, securityEnabled)
        }
    }

    // The -Dcluster.debug option makes the cluster debuggable, this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=8000'
    }
}

// Remote integration tests
task integTestRemote(type: RestIntegTestTask) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    systemProperty "https", System.getProperty("https")
    systemProperty "user", System.getProperty("user")
    systemProperty "password", System.getProperty("password")

    systemProperty 'cluster.number_of_nodes', "${_numNodes}"

    systemProperty 'tests.security.manager', 'false'

    // run tests only if cluster has been set via system property
    if (System.getProperty("tests.rest.cluster") != null) {
        filter {
            includeTestsMatching "org.opensearch.searchrelevance.*IT"
        }
    }
}

run {
    useCluster testClusters.integTest
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
         // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}

ext.createDiffFile = { ->
    def file = Files.createTempFile(URLEncoder.encode(project.name, 'UTF-8'), '.diff').toFile()
    def diffBase = 'refs/remotes/origin/main'
    // Only run locally
    if (!System.getenv('CI')) {
        file.withOutputStream { out ->
            exec {
                commandLine 'git', 'diff', '--no-color', '--minimal', diffBase
                standardOutput = out
            }
        }
    }
    return file
}

diffCoverageReport {
    afterEvaluate {
        diffSource.file = createDiffFile()
    }

    // View report at build/reports/jacoco/diffCoverage/html/index.html
    reports {
        html = true
    }

    violationRules {
        minBranches = 0.00
        minLines = 0.00
        failOnViolation = true
    }
}

compileJava {
    dependsOn spotlessApply
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
compileTestFixturesJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
