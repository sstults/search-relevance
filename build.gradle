import java.nio.file.Files
import org.opensearch.gradle.test.RestIntegTestTask
import org.opensearch.gradle.testclusters.OpenSearchCluster
import java.util.concurrent.Callable

apply plugin: 'java'
apply plugin: 'java-test-fixtures'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'
// for formatting and license headers
apply plugin: 'com.diffplug.spotless'
apply from: 'formatter/formatting.gradle'
// for coverage and diff
apply plugin: 'jacoco'
apply plugin: 'com.form.diff-coverage'
apply plugin: 'opensearch.java-agent'
apply plugin: 'io.freefair.lombok'

def pluginName = 'opensearch-search-relevance'
def pluginDescription = 'opensearch plugin that enables users to fine tuning search based on search relevance judgments'
def packagePath = 'org.opensearch'
def pathToPlugin = 'searchrelevance.plugin'
def pluginClassName = 'SearchRelevancePlugin'
group = "org.opensearch.searchrelevance"
version = "3.1.0.0-SNAPSHOT"

java {
    targetCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
}

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
              name = pluginName
              description = pluginDescription
              licenses {
                license {
                  name = "The Apache License, Version 2.0"
                  url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
              }
              developers {
                developer {
                  name = "OpenSearch Search Relevance Plugin"
                  url = "https://github.com/opensearch-project/opensearch-search-relevance"
                }
              }
            }
        }
    }
}

opensearchplugin {
    name pluginName
    description pluginDescription
    classname "${packagePath}.${pathToPlugin}.${pluginClassName}"
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

dependencyLicenses.enabled = false
// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false
thirdPartyAudit.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.1.0-SNAPSHOT")
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
        // 2.2.0-SNAPSHOT -> 2.2.0.0-SNAPSHOT
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        plugin_no_snapshot = opensearch_build
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
            plugin_no_snapshot += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }
        opensearch_group = "org.opensearch"
        common_utils_version = System.getProperty("common_utils.version", opensearch_build)
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:7.0.4"
        classpath "com.github.form-com.diff-coverage-gradle:diff-coverage:0.9.5"
        classpath "io.freefair.gradle:lombok-plugin:8.13.1"
    }
}

configurations {
    zipArchive
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    implementation "org.opensearch:opensearch:${opensearch_version}"
    api "org.opensearch:opensearch:${opensearch_version}"
    api group: 'org.opensearch', name:'opensearch-ml-client', version: "${opensearch_build}"
    implementation group: 'com.google.guava', name: 'guava', version:'32.1.3-jre'
    compileOnly group: 'commons-lang', name: 'commons-lang', version: '2.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation "org.opensearch:common-utils:${common_utils_version}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}"
    implementation 'com.knuddels:jtokkit:1.1.0'
    // ml-common excluded reflection for runtime so we need to add it by ourselves.
    // https://github.com/opensearch-project/ml-commons/commit/464bfe34c66d7a729a00dd457f03587ea4e504d9
    // TODO: Remove following three lines of dependencies if ml-common include them in their jar
    runtimeOnly group: 'org.reflections', name: 'reflections', version: '0.9.12'  // Note the version change
    runtimeOnly group: 'org.javassist', name: 'javassist', version: '3.29.2-GA'
    runtimeOnly group: 'org.opensearch', name: 'common-utils', version: "${opensearch_build}"
    runtimeOnly group: 'org.apache.commons', name: 'commons-text', version: '1.13.1'
    runtimeOnly group: 'com.google.code.gson', name: 'gson', version: '2.13.1'
    runtimeOnly group: 'org.json', name: 'json', version: '20250517'
    // json-path 2.9.0 depends on slf4j 2.0.11, which conflicts with the version used by OpenSearch core.
    // Excluding slf4j here since json-path is only used for testing, and logging failures in this context are acceptable.
    runtimeOnly('com.jayway.jsonpath:json-path:2.9.0') {
        // OpenSearch core is using slf4j 1.7.36. Therefore, we cannot change the version here.
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'net.minidev', module: 'json-smart'
    }
    runtimeOnly group: 'net.minidev', name:'json-smart', version: "${versions.json_smart}"
    runtimeOnly("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")
    runtimeOnly("com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}")
    // ZipArchive dependencies used for integration tests
    // Check the order in case of transitive dependencies
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-job-scheduler', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-ml-plugin', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'opensearch-knn', version: "${opensearch_build}"
    zipArchive group: 'org.opensearch.plugin', name:'neural-search', version: "${opensearch_build}"

    configurations.all {
        resolutionStrategy {
            force("com.google.guava:guava:32.1.3-jre") // CVE for 31.1
        }
    }
}

def _numNodes = findProperty('numNodes') as Integer ?: 1

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    include '**/*Tests.class'
    systemProperty 'tests.security.manager', 'false'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}
tasks.named("check").configure { dependsOn(jacocoTestReport) }

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

// Set up integration test clusters, installs all zipArchive dependencies and Flow Framework
testClusters.integTest {
    testDistribution = "ARCHIVE"

    // Installs all registered zipArchive dependencies on integTest cluster nodes except security
    configurations.zipArchive.asFileTree.each {
        plugin(provider(new Callable<RegularFile>(){
            @Override
            RegularFile call() throws Exception {
                return new RegularFile() {
                    @Override
                    File getAsFile() {
                        return it
                    }
                }
            }
        })
        )

    }

    // Install Flow Framework Plugin on integTest cluster nodes
    plugin(project.tasks.bundlePlugin.archiveFile)

    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes

    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug OpenSearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("opensearch.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=*:${debugPort}")
            debugPort += 1
        }
    }
    setting 'plugins.search_relevance.workbench_enabled', 'true'
}

run {
    useCluster testClusters.integTest
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
         // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}

ext.createDiffFile = { ->
    def file = Files.createTempFile(URLEncoder.encode(project.name, 'UTF-8'), '.diff').toFile()
    def diffBase = 'refs/remotes/origin/main'
    // Only run locally
    if (!System.getenv('CI')) {
        file.withOutputStream { out ->
            exec {
                commandLine 'git', 'diff', '--no-color', '--minimal', diffBase
                standardOutput = out
            }
        }
    }
    return file
}

diffCoverageReport {
    afterEvaluate {
        diffSource.file = createDiffFile()
    }

    // View report at build/reports/jacoco/diffCoverage/html/index.html
    reports {
        html = true
    }

    violationRules {
        minBranches = 0.00
        minLines = 0.00
        failOnViolation = true
    }
}

compileJava {
    dependsOn spotlessApply
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
compileTestFixturesJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
